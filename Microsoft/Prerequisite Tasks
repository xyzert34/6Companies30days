class Solution {
public:
    bool isCycle(int src,vector<int> &vis,vector<int> &dfs,vector<int> adj[])
    {
        vis[src]=1;
        dfs[src]=1;
        for(auto x: adj[src])
        {
            if(!vis[x])
            {
                if(isCycle(x,vis,dfs,adj))
                    return true;
            }
            else if(dfs[x]==1)//vis[x]==1
                return true;
        }
        dfs[src]=0;
        return false;
    }
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    vector<int> adj[N];
	    vector<int> vis(N,0);
	    vector<int> dfs(N,0);
	    for(int i=0;i<prerequisites.size();i++)
	    {
	        adj[prerequisites[i].second].push_back(prerequisites[i].first);
	    }
	    for(int i=0;i<N;i++)
	    {
	        if(!vis[i])
	        {
	            if(isCycle(i,vis,dfs,adj))
	                return false;
	        }
	    }
	    return true;
	}
};

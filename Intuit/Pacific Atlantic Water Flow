class Solution {
public:
    void solve_dfs(int i,int j,vector<vector<int>> &ocean,int temp,vector<vector<int>> &heights,int dx[][2])
    {
        if(i<0||j<0||i>=heights.size()||j>=heights[0].size())
            return;
        if(heights[i][j]<temp || ocean[i][j]==1)
            return;
        ocean[i][j]=1;
        for(int x=0;x<4;x++)
            solve_dfs(i+dx[x][0],j+dx[x][1],ocean,heights[i][j],heights,dx);
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        vector<vector<int>> pac(m,vector<int>(n,0));
        vector<vector<int>> atl(m,vector<int>(n,0));
        vector<vector<int>> result;
        int dx[][2]={{1,0},{-1,0},{0,1},{0,-1}};
        for(int j=0;j<n;j++)
        {
            solve_dfs(0,j,pac,heights[0][j],heights,dx);
            solve_dfs(m-1,j,atl,heights[m-1][j],heights,dx);
        }
        for(int i=0;i<m;i++)
        {
            solve_dfs(i,0,pac,heights[i][0],heights,dx);
            solve_dfs(i,n-1,atl,heights[i][n-1],heights,dx);
        }   
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(pac[i][j]==1 && atl[i][j]==1)
                    result.push_back({i,j});
            }
        }
        return result;
    }
};

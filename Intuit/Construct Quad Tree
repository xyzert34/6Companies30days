/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    bool check_1(int i,int j,int m,int n,vector<vector<int>>& grid){
        for(int x=i;x<m;x++)
        {
            for(int y=j;y<n;y++)
            {
                if(grid[x][y]!=1)
                    return false;
            }
        }
        return true;
    }
    bool check_0(int i,int j,int m,int n,vector<vector<int>>& grid){
        for(int x=i;x<m;x++)
        {
            for(int y=j;y<n;y++)
            {
                if(grid[x][y]!=0)
                    return false;
            }
        }
        return true;
    }
    Node* solve(vector<vector<int>>& grid,int i,int j,int m,int n)
    {
        Node *root;
        if(check_1(i,j,m,n,grid))
            return root=new Node(true,true,NULL,NULL,NULL,NULL);
        else if(check_0(i,j,m,n,grid))
            return root=new Node(false,true,NULL,NULL,NULL,NULL);
        else
            return root=new Node(true,false,solve(grid,i,j,(m+i)/2,(n+j)/2),solve(grid,i,(n+j)/2,(m+i)/2,n),solve(grid,(m+i)/2,j,m,(n+j)/2),solve(grid,(m+i)/2,(n+j)/2,m,n));
    }
    Node* construct(vector<vector<int>>& grid) {
        int n=grid.size();
        if(n==0)return NULL;
        return solve(grid,0,0,n,n);
    }
};

class Solution {
public:
    bool is_valid(int i,int j,int n,vector<vector<int>> &cnt,vector<vector<int>>& grid)
    {
        if(i>=0 && j>=0 && i<n && j<n && cnt[i][j]==0 && grid[i][j]!=1)
            return true;
        return false;
    }
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        queue<pair<int,int>> q;
        vector<vector<int>> cnt(n,vector<int> (n,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1)
                {
                    q.push({i,j});
                }
            }
        }
        if(q.empty() || q.size()==(n*n))    return -1;
        while(!q.empty())
        {
            int i=q.front().first;
            int j=q.front().second;
            q.pop();
            if(is_valid(i-1,j,n,cnt,grid))
            {
                cnt[i-1][j]=1+cnt[i][j];
                q.push({i-1,j});
            }
            if(is_valid(i+1,j,n,cnt,grid))
            {
                cnt[i+1][j]=1+cnt[i][j];
                q.push({i+1,j});
            }
            if(is_valid(i,j-1,n,cnt,grid))
            {
                cnt[i][j-1]=1+cnt[i][j];
                q.push({i,j-1});
            }
            if(is_valid(i,j+1,n,cnt,grid))
            {
                cnt[i][j+1]=1+cnt[i][j];
                q.push({i,j+1});
            }
        }
        int ma=INT_MIN;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                ma=max(ma,cnt[i][j]);
            }
        }
        return ma;
    }
};
